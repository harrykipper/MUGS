extensions [csv table gis]

globals [
  version patch-dimension
  world place greenery walk ; GIS datasets
  zones visits-t parks visits-to-parks
  class-t ind-file file-string area-file picture
  classes quintiles prob-init
  factor ; What proportion of people agents compare themselves to in the park.
  diversity ; Shannon idx
  sunny?
  urbs
]

patches-own [simd name parkid parksize green? attractivity walkability]

turtles-own [
  tol casa neigh myLocalParks closest-park myNeighbours
  prob-going gone-today gone-this-week visits
  id age class gender ;  one day we'll have health, ethnicity, illnesses, tenure...
  attitude has-car has-child has-dog work
]

to setup
  ca
  file-close-all
  reset-ticks

  ; certain combinations of cases don't make sense or have trivial results
  if impossible-run [stop]

  set version "0.2.6.8"
  set classes [1 2 3 4]
  set quintiles [1 2 3 4 5]

  set sunny? (ifelse-value
    city = "edinburgh" [1.12]
    city = "dundee"    [1.24]
                       [1]
  )
  set factor 10
  if scale <= 30 [set factor 20]

  setup-world

  ask patches [
    set simd 100
    set green? false
    set parksize 0
  ]

  set visits-t table:make
  set visits-to-parks table:make
  set diversity table:make

  ;; create a table that stores the exponent of the initial probability per class, and the colour of each class
  ; if not same-init-prob [set class-t table:from-list [[1 [1 yellow]] [2 [1.1 blue]] [3 [1.35 black]] [4 [1.85 red]]]]
  set class-t table:from-list [[1 [1.4 yellow]] [2 [1 blue]] [3 [1 black]] [4 [0.6 red]]]

  create-city-from-gis
  read-agents
  set zones filter [z -> count turtles with [neigh = z] > 0] zones
  set-preferred-parks
  ask turtles [identify-neighbours]

  foreach zones [zn ->
    table:put visits-t zn [0 0]
    table:put diversity zn (getShannon zn)
  ]
  table:put visits-t "overall" [0 0]
  foreach parks [pk -> table:put visits-to-parks pk [0 0]]
  set prob-init table:make
  foreach classes [cl -> table:put prob-init cl mean [prob-going] of turtles with [class = cl]]

  if behaviorspace-run-number > 0 [prepare-data-save]  ;; If we are in batch mode we produce an output file with everything in it.
  colour-world
  ;vid:start-recorder
end

;; =============| Set up |====================

to read-agents
  let sex ["M" "F"]
  let agez [[16 19] [20 21] [22 24] [25 29] [30 34] [35 39] [40 44] [45 49] [50 54] [55 59] [60 64] [65 75]]
  foreach csv:from-file (word  "modeldata/socialclass1675-" city ".csv") [zn ->
    let i 1
    while [i < length zn] [
      foreach sex [sx ->
        foreach classes [cl ->
          foreach agez [ag ->
            let howmany round (item i zn / scale)
            let places urbs with [green? = false and is-string? name]
            if random-allocation = false [
              ifelse complete-segregation
              [set places places with [simd = getSimd cl]]
              [set places places with [name = item 0 zn]]
            ]
            if howmany > 0 and any? places [
              crt howmany [
                set visits 0
                move-to one-of places
                set casa patch-here
                set neigh [name] of casa
                set myLocalParks []
                set gender sx
                set class cl
                set age item 0 ag + (random (1 + item 1 ag - item 0 ag))
                set gone-this-week false
                set has-dog false
                if behaviorspace-run-number = 0 [
                  set color item 1 table:get class-t class
                  set shape "circle"
                ]
                let inpro 0
                ifelse same-init-prob
                [set inpro initial-prob]
                [;let inpro initial-prob ^ item 0 table:get class-t class
                 set inpro initial-prob * item 0 table:get class-t class
                ]
                set inpro (min list (155 - age) 100 / 100) * inpro
                set prob-going random-normal inpro 0.025
                if prob-going < 0 [set prob-going 0.001]
                set-diversity-thresholds
              ]
            ]
            set i i + 1
          ]
        ]
      ]
    ]
  ]
end

to setup-world
  ;; We scale the world according to the dimensions of the raster layer.
  ;; Our rasters are in meters and the pixel size is 5mt.
  gis:load-coordinate-system (word "modeldata/pcode-pop-" city ".prj")
  set world gis:load-dataset (word "modeldata/" city ".asc")
  set place gis:load-dataset (word "modeldata/pcode-pop-" city ".shp")
  set greenery gis:load-dataset (word "modeldata/" city "-city-parks.shp")
  set walk gis:load-dataset (word "modeldata/walk-" city ".shp")
  let x round gis:width-of world / scale
  let y round gis:height-of world / scale
  resize-world (x - 2 * x) x (y - 2 * y) y
  gis:set-world-envelope gis:envelope-of world

  ;; This tells us how much a patch measures in meters. A patch is (patch-dimension ^ 2) square meters.
  set patch-dimension round ((gis:width-of world * 5) / (max-pxcor * 2))

  ; https://stackoverflow.com/questions/24761104/netlogo-how-to-hatch-a-turtle-at-a-certain-distance-on-gis-layers
  ; We use this if we want to avoid scaling the world. In such case, all the values measured in patches have to be divided by patch-scale.
  ; set patch-scale (item 1 gis:world-envelope - item 0 gis:world-envelope ) / world-width ;/ scale
end

to create-city-from-gis
  if behaviorspace-run-number = 0 [gis:paint world 125]
    gis:set-drawing-color orange
    gis:draw place 2

  gis:apply-coverage place "CODE" name
  gis:apply-coverage place "QUINTILE" simd
  gis:apply-coverage greenery "ID" parkid ;; "DISTNAME1" in the shp contains the human readable name of the park, but not all of them have it. Use the "ID" for the momen
  gis:apply-coverage walk "WEIGHTEDQU" walkability

  ask patches gis:intersecting greenery [
    if is-string? parkid [
      set green? true
      set parkid substring parkid 0 13
    ]
  ]

  set parks remove-duplicates [parkid] of patches with [green? = true]
  foreach parks [  ;; Each park patch knows how big the whole park is. Useful later, maybe inefficient.
    pk ->
    let pks patches with [green? and parkid = pk]
    let sz count pks
    ask pks [set parksize sz]
  ]

  ask patches with [green? and parksize = 1] [
    set green? false
    set parkid 0
    set parksize 0
  ]

  ask patches with [walkability > 0][
    set walkability (ifelse-value
      walkability = 1 [0.5]
      walkability = 2 [0.66]
      walkability = 3 [1]          ;; The walkability idx looks trustworthy only for the top quartile.
                      [2])
    if have-walkability = false [set walkability 1]
  ]

  if city = "glasgow" [ask patches with [name = "S28000373"][set simd 3]]  ;; Dennistoun should be 3. Don't know why it isn't. Adjust manually
  set zones remove-duplicates [name] of patches with [is-string? name and walkability > 0]
  set urbs patches with [walkability > 0]
end

to set-diversity-thresholds
  set tol random-normal ((min list (155 - age) 100 / 100) * tolerance) 0.01 ;; Tolerance decreases with age. After 55 people get grumpy
  if have-heterophily and class > 2 [
    let tl heteroph-tol
    set tol random-normal tl 0.01
  ]
end

to set-preferred-parks
  ;; We assume that a park's "catchment area" is proportional to its size.
  ;; Agents will have a list of parks within their reach and one park as their closest.
  ;; We use the "closest park" information in one of our implementations of social influence.
  ask patches with [green? and count neighbors with [green? = false] > 0] [
    set attractivity (get-attractivity parksize)
    ask turtles in-radius attractivity [  ; / patch-scale)
      if not member? [parkid] of myself myLocalParks [set myLocalParks fput [parkid] of myself myLocalParks]
    ]
  ]
;  show (word "DEBUG: " city ": " (count turtles with [length myLocalParks = 0] / count turtles) " agents with no parks")
  ask turtles [
    ;; If the agent doesn't have any park in their immediate reach the probability is halved
    if length myLocalParks = 0 [set prob-going prob-going * 0.25]
    set closest-park [parkid] of min-one-of patches with [green?] [distance myself]
    if member? closest-park myLocalParks [set myLocalParks remove closest-park myLocalParks] ; closest park must appear only once
    set myLocalParks fput closest-park myLocalParks
  ]
end

to identify-neighbours
  ;; People in 500mt radius are "neighbours".
  ;; We could or could not consider zone boundaries in our definition of 'neighbours'.
  ;; We should probably do so if we want to stress the segregation factor in social influence.
  set myNeighbours turtles in-radius (500 / patch-dimension); with [neigh = [neigh] of myself]
end

; ===========| Main loop |=========================

to go
  if impossible-run [stop]
  ;vid:record-view
  ask turtles [
    move-to casa
    set gone-today false
  ]

  ; We update certain things on Sundays only, to save computing time
  if ticks > 0 and ticks mod 7 = 0 [
    update-visits-zone
    if pull and ticks > 7 [getLocalInfluence]
    ask turtles [
      set gone-this-week false
      (ifelse
        prob-going >= 1 [set prob-going 0.95]
        prob-going <= 0 [set prob-going 0.001]
      )
    ]
    if behaviorspace-run-number != 0 [save-stuff]
  ]

  ;if ticks = 14 [vid:save-recording (word "foo.mp4")]

  ask turtles [if random-float 1 < (prob-going * walkability * sunny?) [go-outdoors]]
  evaluate-agents-experience

  ;vid:record-view
  tick   ; a tick is a day
  if ticks = 1 + (years * 365) [
    if behaviorspace-run-number > 0 [save-final-stats]
    stop
  ]
end

to evaluate-agents-experience

  ;; All those who have gone to a park check whether they liked who else was there.
  ;; If an agent is dissonant, her likelihood to visit a park will decrease of factor 'a'
  ;; and will move the offending park to the bottom of the list of accessible parks,
  ;; so that next time he'll go to a different place.
  ;; If the mix was acceptable the likelihood of going again to the same park will go up

  foreach parks [pk ->
    let people-here turtles-on patches with [parkid = pk]
    update-park-attendance pk count people-here
    if count people-here > 1 [
      ask people-here [
        ifelse iAmDissonant other people-here
        [
          let multiplier 1
          ifelse length myLocalParks > 1
            [set myLocalParks remove-item 0 lput pk myLocalParks]
            [set multiplier 1.20]  ;; if we only have one park that we can go to and it disappoints us we are going to suffer more.
          set prob-going prob-going - (a * multiplier * prob-going)
        ]
        [set prob-going prob-going + (a * prob-going)]
      ]
    ]
  ]
end

to-report iAmDissonant [otherpeople]

  ;; Here we check how different we are from the other people in the park.
  ;; We don't consider everybody else, only a subset of other people, simulating random encounters.
  ;; Class and age differences are considered. Ethnic differences should probably also be included.
  ;; The assumption is that extreme age groups (young and old) are sensitive to age differences,
  ;; all the other age groups are sensitive to class differences.

  ;; :: TODO ::
  ;; We *REALLY* should discount the fraction of the people we encounter by the size of the park.
  ;; It will be less unrealistic and will save us computing time.
  let others n-of (1 + (count otherpeople / factor)) otherpeople

  ;; This is the old class/age code. Remember to check that the tolerance range in the sliders work as intended...
  ;ifelse age <= 20 or age >= 67
  ;[if push-age [set differing count others with [abs(age - [age] of myself) >= 40] / count others]]
  ;[if push-cl [set differing count others with [is-number? class and abs(class - [class] of myself) >= 2] / count others]]

  ;; In this implementation we assume that the top 2 classes (AB and C1) behave as in
  ;; prior versions (are tolerant/intolerant towards people of the bottom two classes).
  ;; On the contrary, people from the bottom 2 classes seek to frequent parks where they are more likely
  ;; to encounter people from the top 2 classes. In other words, the top 2 classes crave class segregation,
  ;; the bottom 2 seek class diversity.

  if push-cl [
    ifelse class > 2
    [ ; the poor
      let differing count others with [class < 3] / count others
      ifelse have-heterophily
      [if differing < tol [report true]] ;; the poor fancy being around the rich and are dissonant if there are too few.
      [if differing > tol [report true]] ;; the poor behave like the rich and want to be around similar people
    ][; the rich
      let differing count others with [class > 2] / count others
      if differing > tol [report true]   ;; the rich always want to be among themselves.
    ]
  ]
  report false
end

;; ==========================|| "social influence" ||====================================


to getLocalInfluence
  ;; This checks a random neighbour. If they have gone more than us, we will be encouraged.
  ;; If they have gone much less than us, we will be discouraged.
  ask turtles [
    ;let ppl my-neighbours
    ;if global-perception [set ppl one-of other turtles]
    let quantovanno [visits] of one-of myNeighbours
    ifelse quantovanno > (visits * 1.25)
    [set prob-going prob-going + (prob-going * a)]
    [if quantovanno < (visits * 0.75) [set prob-going prob-going - (prob-going * a)]]
  ]
end

;; =============================================================================================
;; =============================================================================================

to go-outdoors
  ;; We go to the first park in our list of accessible parks.
  ;; see evaluate-agents-experience for the rest of the dynamic.
  let wheretogo first myLocalParks
  move-to one-of patches with [parkid = wheretogo]
  set visits visits + 1
  set gone-today true
  set gone-this-week true
end

;; =============================| Support functions |=====================================

to print-debug-info
  show (word city ": " count patches with [not is-number? name] "; Agents: " count turtles)
  foreach table:keys class-t [
    cl -> let ppl turtles with [class = cl]
    print (word "Class " cl ": " count ppl "(" precision (count ppl / count turtles) 2 ") - median age: " median [age] of ppl)
    let allwalk remove-duplicates [walkability] of urbs
    foreach allwalk [wk ->
      let tot count ppl with [[walkability] of patch-here = wk]
      show (word "walkability " wk ": " tot " (" precision (tot / count ppl) 2 ")" )
    ]
    print ""
  ]
end

to-report impossible-run
  if (push-cl = false and pull = false) or
     (random-allocation = true and complete-segregation = true) or
     (have-heterophily = true and complete-segregation = true)
  [report true]
  report false
end

to colour-world
  ;ask patches [set pcolor blue]
  ;let patchcols table:from-list [[1 13] [2 red] [3 16] [4 17] [5 white]]
  ;ask patches with [simd > 0] [set pcolor table:get patchcols round simd]
  ask patches with [green?][set pcolor green]
end

to update-park-attendance [park people]
  let totvisits item 0 table:get visits-to-parks park + people
  let lastweek item 1 table:get visits-to-parks park
  table:put visits-to-parks park list totvisits lastweek
end

to update-visits-zone
  ;; Keep track of proportion of park goers per zone. We do this weekly
  foreach zones [z ->
    let old item 0 table:get visits-t z
    let locals turtles with [neigh = z]
    table:put visits-t z list (count locals with [gone-this-week] / count locals) old
  ]
  ;let old item 0 table:get visits-t "overall"
  ;table:put visits-t "overall" list mean (item 0 table:values visits-t) old
end

;; Use this when running the model without rescaling the world, with the appropriate patch-scale
;; set in setup-world. If we are scaling the world we run the procedure below
;to-report get-attractivity [pksize]
;  report (cf:ifelse-value
;    pksize < 20 / patch-scale  [10 / patch-scale]
;      pksize < 50 / patch-scale  [20 / patch-scale]
;      pksize < 100 / patch-scale [30 / patch-scale]
;      pksize < 200 / patch-scale [40 / patch-scale][50 / patch-scale]
;  )
;end

to-report get-attractivity [pksize]
  ;; People will walk 200 meters to get to a park of 1,000sqm
  ;; and 2km to get to a park larger than 20,000sqm
  report (ifelse-value
    pksize < (200 ^ 2) / (patch-dimension ^ 2) [200 / patch-dimension]
      pksize < (500 ^ 2) / (patch-dimension ^ 2) [500 / patch-dimension]
      pksize < (1000 ^ 2) / (patch-dimension ^ 2)  [850 / patch-dimension]
      pksize < (1500 ^ 2) / (patch-dimension ^ 2) [1000 / patch-dimension][1250 / patch-dimension]
  )
end

;; Allocation of agents in the complete-segregation case
to-report getSimd [cl]
  report (ifelse-value
    cl = 1 [5]
    cl = 2 [3]
    cl = 3 [2]
           [1]
    )
end

to showclasses
  foreach zones [zn ->
    let tonp turtles with [neigh = zn]
    foreach classes [cl -> show count tonp with [class = cl]
    ]
  ]
end

to-report getShannon [zone]
  let tonp turtles with [neigh = zone]
  let div map
  [cl -> (1 + count tonp with [class = cl] / count tonp) * (ln (1 + count tonp with [class = cl] / count tonp))] classes
  report (- sum div)
end

; ===================================| Data output |============================================

to prepare-data-save
  let agepush ""
  let classpush ""
  let heterophily ""
  let equalinit ""
  let influence ""
  let randomall ""
  let perfectseg ""
  let walkab ""
  if pull = true [set influence "-pull"]
  if push-cl = true [set classpush "-class"]
  if push-age = true [set agepush "-age"]
  if random-allocation = true [set randomall "_random"]
  if complete-segregation = true [set perfectseg "_segregated"]
  if same-init-prob [set equalinit "-equalinit"]
  if have-walkability [set walkab "-wlk"]
  ifelse have-heterophily = true [set heterophily "-heteroph"][set heterophily "-homoph"]
  set file-string (word version agepush classpush influence heterophily equalinit randomall perfectseg) ; we drop global
  let base (word "results/individual_runs/spans-" file-string "-" city "-p" initial-prob "-a" a "-t" tolerance "-h" heteroph-tol walkab "-s" scale)
  set ind-file  (word base ".csv")
  set area-file (word base "-area.csv")
  set picture (word base ".png")
  file-open ind-file
  file-print (word "tick,medAB,medC1,medC2,medDE,meanAB,meanC1,meanC2,meanDE,")
  file-close
  file-open area-file
  file-print (word "tick," zones)
  file-close
end

to save-final-stats
  ;; This file contains the final values of every simulation run of a specific city.
  let dir "results/"
  let file-name (word dir "spans-" version "-scale_" scale "-all.csv")
  let zone-file (word dir "spans-" version "-scale_" scale "-zones.csv")
  let header-1 "city,age,class,pull,random,segregated,heterophily,equalinit,initial-prob,walkability,a,tolerance,heteroph-tol,medAB,medC1,medC2,medDE,meanAB,meanC1,meanC2,meanDE,"
  let header-2 "varAB,varC1,varC2,varDE,med1,med2,med3,med4,med5,mean1,mean2,mean3,mean4,mean5,"
  let conditions (word city "," push-age "," push-cl "," pull "," random-allocation "," complete-segregation "," have-heterophily "," same-init-prob "," initial-prob "," have-walkability "," a "," tolerance ","  heteroph-tol ",")
  ifelse file-exists? file-name
  [file-open file-name]
  [
    file-open file-name
    file-type header-1
    file-print header-2
  ]
  file-type conditions
  foreach classes [cls -> file-type (word (median [visits] of turtles with [class = cls] / years) ",")]
  foreach classes [cls -> file-type (word (mean [visits] of turtles with [class = cls] / years) ",")]
  foreach classes [cls ->
    let initial table:get prob-init cls
    ;file-type (word ((mean [prob-going] of turtles with [class = cls] - initial) / initial) ",")
    file-type (word (mean [prob-going] of turtles with [class = cls] / initial) ",")
  ]
  foreach quintiles [qtl ->
    ifelse count patches with [simd = qtl] > 5  ;; we have to do this beacause some cities don't have all the deprivation quintiles
    [file-type (word (median [visits] of turtles-on patches with [simd = qtl] / years) ",")]
    [file-type "NA,"]
  ]
  foreach quintiles [qtl ->
      ifelse count patches with [simd = qtl] > 5
      [file-type (word (mean [visits] of turtles-on patches with [simd = qtl] / years) ",")]
      [file-type "NA,"]
  ]
  file-print ""
  file-close

  ifelse file-exists? zone-file
  [file-open zone-file]
  [
    file-open zone-file
    file-print (word "zone,diversity,ab,c1,c2,de," header-1 "median,mean")
  ]
  foreach zones [zn ->
    let all turtles with [neigh = zn]
    let ab count all with [class = 1] / count all
    let c1 count all with [class = 2] / count all
    let c2 count all with [class = 3] / count all
    let de count all with [class = 4] / count all
    file-type (word zn "," table:get diversity zn "," ab "," c1 "," c2 "," de "," conditions)
    foreach classes [cls ->
      let thisppl all with [class = cls]
      ifelse any? thisppl
      [file-type (word (median [visits] of thisppl / years) ",")]
      [file-type "NA,"]
    ]
    foreach classes [cls ->
      let thisppl all with [class = cls]
      ifelse any? thisppl
      [file-type (word (mean [visits] of thisppl / years) ",")]
      [file-type "NA,"]
    ]
    file-type (word (median [visits] of all / years) ",")
    file-type (word (mean [visits] of all / years) ",")
      file-print ""
  ]
  file-close
  export-view picture
end

to save-stuff
  file-open ind-file
  file-type (word ticks ",")
  foreach classes [cls -> file-type (word (median [visits] of turtles with [class = cls] / (ticks / 7)) ",")]
  foreach classes [cls -> file-type (word (mean [visits] of turtles with [class = cls] / (ticks / 7)) ",")]
  file-print ""
  file-close
  file-open area-file
  file-type (word ticks ",")
  foreach zones [z -> file-type (word table:get visits-t z ",")]
  file-print ""
  file-close
end

to output-class-division
  file-open (word city "-class.csv")
  file-print "zone,ab,c1,c2,de,"
  foreach zones [zn ->
    file-type (word zn ",")
    foreach classes [cls -> file-type (word count turtles with [neigh = zn and class = cls] ",")]
    file-print ""
  ]
  file-close
end
@#$#@#$#@
GRAPHICS-WINDOW
255
10
2681
1837
-1
-1
6.25
1
1
1
1
1
0
0
0
1
-193
193
-145
145
0
0
1
day
25.0

BUTTON
4
10
77
43
NIL
setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
80
11
143
44
NIL
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
5
46
152
79
initial-prob
initial-prob
0
0.2
0.09
0.001
1
NIL
HORIZONTAL

SLIDER
154
48
249
81
a
a
0
0.5
0.05
0.0001
1
NIL
HORIZONTAL

SLIDER
1
377
124
410
tolerance
tolerance
0
1
0.65
0.01
1
NIL
HORIZONTAL

INPUTBOX
193
85
243
145
years
4.0
1
0
Number

CHOOSER
99
119
191
164
scale
scale
10 20 30 40 50
1

SWITCH
4
201
147
234
same-init-prob
same-init-prob
0
1
-1000

CHOOSER
5
154
97
199
city
city
"aberdeen" "dundee" "edinburgh" "glasgow"
2

BUTTON
148
202
248
235
Display parks catchment
ask patches with [green? and count neighbors with [green? = false] > 0] [ask patches in-radius attractivity [set pcolor blue]]\nask patches with [green?][set pcolor green]
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
150
237
247
270
Reset colours
ask patches [set pcolor black]\ncolour-world
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SWITCH
6
118
96
151
pull
pull
0
1
-1000

SWITCH
98
82
192
115
push-cl
push-cl
0
1
-1000

SWITCH
6
81
96
114
push-age
push-age
1
1
-1000

SWITCH
98
167
249
200
global-perception
global-perception
1
1
-1000

SWITCH
4
236
148
269
have-heterophily
have-heterophily
0
1
-1000

SWITCH
4
306
148
339
random-allocation
random-allocation
1
1
-1000

SWITCH
4
271
149
304
complete-segregation
complete-segregation
1
1
-1000

BUTTON
146
12
249
45
NIL
print-debug-info
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SWITCH
4
342
149
375
have-walkability
have-walkability
0
1
-1000

SLIDER
126
377
248
410
heteroph-tol
heteroph-tol
0
1
0.2
0.01
1
NIL
HORIZONTAL

@#$#@#$#@
# TODO

* Plot change in probability of going per class per city
* Test random allocation of citizens in every city.

# Changelog

## 0.2.6.3
* We remove an inexplicable and potentially disruptive bug....

## 0.2.6
* We introduce walkability

## 0.2.5.12
* FIxed a bug in zones list not being created.

## 0.2.5.11
* We introduce the concept that different classes may be sensitive to different types of social influence. The rich are more sensitive to what kind of people they find in the park, the poor are more sensitive to "local" pressure.

## 0.2.5.10
* We adjust the initial probability accounting for hours of sunshine per https://www.currentresults.com/Weather/United-Kingdom/annual-sunshine.php

## 0.2.5.9
* Heterophily threshold now 0.25 instead of 0.35. What changes? Changes fuck all.
* Neighbours are only in one's district.

## 0.2.5.8
* Introduced perfect segregation
* Changed initial probability ratios b/w classes
* Social influence reverted to 1/5

## 0.2.5.7
* Introduced random allocation
* Social influence is now 1/10 of a

## 0.2.5.6
* Corrected a bug in name of individual files. Added "-pull"
* Introduced random allocation of agents to test absence of segregation

## 0.2.5.5
* Output code modified to produce a single output file containing all run results.

## 0.2.5.4
* Slight change in social influence code. Social influence effect only takes place when others visiting parks substantially more/less than us.
* Introduced scaling factor 30. Seems a good compromise bw speed and accuracy.
* Changed Dundee boudaries
* Lowered initial probability of those far from parks (now half of normal).

## 0.2.5.3
* Increased exp for DE (makes them less likely).
* Made push and pull more symmetric.

## 0.2.5.2
* Code adapted for Netlogo 6.1

## 0.2.5-beta2
* New update-feedbacks-week: we now check whether a small random number of neighbours visit parks more than we do. If so we are encouraged to visit the parks more, if they visit substantially less than us we decrease our probability. (Note that we do not consider zone boundaries in our definition of 'neighbours', however we should probably do so if we want to stress the segregation factor in social influence)

## 0.2.5-beta
New iAmDissonant: different tolerance thresholds for different classes under the heterophily assumption

## 0.2.5-alpha
We now use a raster base to scale the world appropriately for each city

## 0.2.4.2
Tolerance and initial probability decrease with age.
Difference is now checked against couple of classes

## 0.2.4
We now implement "social influence" as 

## 0.2.3
The choice of parks to visit is not completely random anymore. Now the accessible parks are in a list, the agent picks the first item and if the experience is not pleasant the park will be moved to the bottom of the list, so that next time she will go to a different park.

Does it change anything? Changes fuck all.

## 0.2.2
We don't check variations in visits to local parks anymore. We check variations in the habits of neighbours.

## 0.2.1.3
Added debug switch

## 0.2.1.2
Changed implementation of update-park-visits. Now using tables, should make the model run faster

## 0.2.1.1
Changed behaviour in update-feedbacks-week. 
If less people around are going compared to prior week, decrease probability. Also, a is not multiplied by 2.


# Drivers of the dynamics

## Pull factors

### Culture

Uniformly distribuited with means differing by social class.

### Neighbours' behaviour (_surroundings_)

Observation of other's behaviour. How to implement?

- "_normative behaviors are influenced by relative shifts in observed behaviours_"
	- observe differences in the number of park-goers in local area from day to day (or week to week). Increase will encourage people to go, decrease will do nothing (or discourage).
- compare local behaviour against global (city)
	- confront own area with rest of city, more park goers encourage people to go, less do nothing.
		- (computationally less demanding, but less realistic) 

## Push factors

### Dissonance (_experience_)

- **class mix** - as an homage to the homophily passion
- **age mix** - following Seaman et al.
- **ethnic mix** - not implemented (yet)

We assume that the extreme age groups (young and old) will be more sensitive to age differences, the others will be more sensitive to class differences.

Both evaluated against a **tolerance** parameter, uniformly distributed in the population. 

- Should tolerance differ by age/class?

If too many (randomly selected) people in the park the same day are too different, **dissonance** increases, the person is discouraged to go again.

## Geography

- _Areas_ of reference are _postcode areas_
- Population - an accurate reproduction in scale of Scottish cities (1/20 or 1/40). 
	- Age, gender, SEC.
		- Should include ethinicity/remove gender.
	- Under 16/ Over 64 missing - will include.
- Agents randomly choose one among list of nearby parks.
	- Bigger parks have a larger catchment area
- Introduce differences in scope by SEC? 
	- "Rich people will go further"?


# Old model stuff. Don't read

The decision process is probabilistic. A baseline probability is adjusted considering the following:

* Weather
* Social class
* Weekend / weekday
* Age and health
* Employment status
* Presence of children / dogs.
* General attitude towards local green areas
* Distance from local green area
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 6.1.0
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
<experiments>
  <experiment name="allcities_T2" repetitions="1" sequentialRunOrder="false" runMetricsEveryStep="false">
    <setup>setup</setup>
    <go>go</go>
    <exitCondition>ticks = 1 + (365 * years)</exitCondition>
    <enumeratedValueSet variable="tolerance">
      <value value="0.45"/>
      <value value="0.55"/>
      <value value="0.65"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="heteroph-tol">
      <value value="0.15"/>
      <value value="0.25"/>
      <value value="0.35"/>
      <value value="0.45"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="initial-prob">
      <value value="0.09"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="a">
      <value value="0.25"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="same-init-prob">
      <value value="true"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="city">
      <value value="&quot;aberdeen&quot;"/>
      <value value="&quot;edinburgh&quot;"/>
      <value value="&quot;dundee&quot;"/>
      <value value="&quot;glasgow&quot;"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="scale">
      <value value="30"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="pull">
      <value value="true"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="push-cl">
      <value value="true"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="have-heterophily">
      <value value="true"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="global-perception">
      <value value="false"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="random-allocation">
      <value value="false"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="complete-segregation">
      <value value="false"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="have-walkability">
      <value value="true"/>
    </enumeratedValueSet>
  </experiment>
</experiments>
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
